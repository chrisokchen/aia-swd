---
description: 
globs: 
alwaysApply: false
---
# 規則：根據 PRD 產生任務清單

## 目標

指導 AI 助手根據現有的產品需求文件（PRD），以 Markdown 格式建立詳細、逐步的任務清單。該任務清單應能引導開發人員完成實作。

## 輸出

- **格式：** Markdown（`.md`）
- **位置：** `/tasks/`
- **檔名：** `tasks-[prd-file-name].md`（例如：`tasks-prd-user-profile-editing.md`）

## 流程

1.  **接收 PRD 參考：** 使用者指定一個 PRD 檔案給 AI。
2.  **分析 PRD：** AI 讀取並分析指定 PRD 的功能需求、使用者故事及其他章節。
3.  **階段一：產生主要任務：** 根據 PRD 分析，建立檔案並產生實作該功能所需的主要高階任務。請自行判斷高階任務數量，通常約 5 項。以指定格式（暫不含子任務）呈現這些任務，並告知使用者：「我已根據 PRD 產生高階任務。準備產生子任務了嗎？請回覆 'Go' 以繼續。」
4.  **等待確認：** 暫停並等待使用者回覆「Go」。
5.  **階段二：產生子任務：** 一旦使用者確認，將每個主要任務細分為更小、可執行的子任務。確保子任務能合理地完成主要任務，並涵蓋 PRD 所隱含的實作細節。
6.  **辨識相關檔案：** 根據任務與 PRD，辨識可能需要建立或修改的檔案。在 `Relevant Files` 區塊中列出這些檔案，並包含對應的測試檔案（如適用）。
7.  **產生最終輸出：** 將主要任務、子任務、相關檔案及備註合併為最終 Markdown 結構。
8.  **儲存任務清單：** 將產生的文件以 `/tasks/` 目錄下的 `tasks-[prd-file-name].md` 檔名儲存，其中 `[prd-file-name]` 為輸入 PRD 檔案的基礎名稱（例如：輸入為 `prd-user-profile-editing.md`，則輸出為 `tasks-prd-user-profile-editing.md`）。

## 輸出格式

產生的任務清單**必須**遵循以下結構：

```markdown
## 相關檔案

- `path/to/potential/file1.ts` - 為何此檔案相關的簡要說明（例如：此功能的主要元件）。
- `path/to/file1.test.ts` - `file1.ts` 的單元測試。
- `path/to/another/file.tsx` - 簡要說明（例如：資料提交的 API 路由處理器）。
- `path/to/another/file.test.tsx` - `another/file.tsx` 的單元測試。
- `lib/utils/helpers.ts` - 簡要說明（例如：所需的工具函式）。
- `lib/utils/helpers.test.ts` - `helpers.ts` 的單元測試。

### 備註

- 單元測試通常應與其對應的程式檔案放在同一目錄（例如：`MyComponent.tsx` 與 `MyComponent.test.tsx`）。
- 使用 `npx jest [optional/path/to/test/file]` 執行測試。不帶路徑時會執行 Jest 設定找到的所有測試。

## 任務

- [ ] 1.0 主要任務標題
  - [ ] 1.1 [子任務描述 1.1]
  - [ ] 1.2 [子任務描述 1.2]
- [ ] 2.0 主要任務標題
  - [ ] 2.1 [子任務描述 2.1]
- [ ] 3.0 主要任務標題（若僅為結構或設定，可能不需子任務）
```

## 互動模式

此流程明確要求在產生主要任務後暫停，待使用者確認（「Go」）後才繼續產生詳細子任務。這可確保高階規劃符合使用者預期，再進一步細化。

## 目標讀者

假設任務清單的主要讀者為**初級開發人員**，將負責實作該功能。
